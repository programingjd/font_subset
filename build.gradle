buildscript {
  repositories {
    jcenter()
  }
  dependencies {
    classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.6'
    classpath 'net.sf.proguard:proguard-gradle:5.2.1'
    classpath 'org.jsoup:jsoup:1.9.2'
  }
}

group 'info.jdavid.font.subset'
version '1.1.0'

apply plugin: 'java'
apply plugin: 'maven-publish'
apply plugin: 'com.jfrog.bintray'

// Keep at 1.6 for Android
sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
  jcenter()
}

dependencies {
  compile files('sfntly/java/lib/icu4j-4_8_1_1.jar', 'sfntly/java/lib/icu4j-charset-4_8_1_1.jar')
  compile files('sfntly/java/lib/jcommander-1.27.jar')
}

sourceSets {
  main {
    java {
      srcDirs = ['sfntly/java/src', 'src/java']
    }
  }
}

jar {
  duplicatesStrategy = DuplicatesStrategy.EXCLUDE
  from {
    configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
  }
  from {
    configurations.runtime.collect { it.isDirectory() ? it : zipTree(it) }
  }
}

task runExtractorTest(type: JavaExec) {
  classpath = files('font_subset-1.0.0.jar')
  main = 'info.jdavid.font.subset.Extractor'
}

task proguard(type: proguard.gradle.ProGuardTask) {
  configuration 'proguard.txt'
  injars "build/libs/extractor-${version}.jar"
  outjars "extractor-${version}.jar"
  doLast {
    def readme = file('README.md')
    def badge = { String label, String text, String color ->
      "https://img.shields.io/badge/_${label}_-_${text}-${color}.png?style=flat"
    }
    String v = project.version
    def download =
      "https://bintray.com/artifact/download/programingjd/maven/info/jdavid/font/subset/extractor/$v/extractor-${v}.jar"
    readme.readLines().withIndex().collect { line, i ->
      switch (i) {
        case 0:
          return "![jcenter](${badge('jcenter',v,'6688ff')})"
        case 10: return "[Download](${download}) the latest jar."
        case 20: return "  <version>${v}</version>"
        case 33: return "  compile 'info.jdavid.font.subset:extractor${v}'"
        default: return line
      }
    }.join('\n').with { readme.text = it }
  }
}

javadoc {
  source = [ 'src/java' ]
}

task javadocJar(type: Jar, dependsOn: javadoc) {
  classifier = 'javadoc'
  from javadoc.destinationDir
}

task sourcesJar(type: Jar, dependsOn: classes) {
  classifier = 'sources'
  from files([ 'src/java' ])
}

artifacts {
  archives sourcesJar, javadocJar
}


publishing {
  publications {
    mavenJava(MavenPublication) {
      artifact {
        file("extractor-${version}.jar")
      }
      artifact sourcesJar
      artifact javadocJar
    }
  }
  repositories {
    maven {
      url "$buildDir/repo"
    }
  }
}

bintray {
  user = 'programingjd'
  key = getBintrayApiKey()
  dryRun = false
  publish = true
  publications = ['mavenJava']
  pkg {
    repo = 'maven'
    name = 'info.jdavid.font.subset'
    websiteUrl = 'https://github.com/programingjd/font_subset'
    issueTrackerUrl = 'https://github.com/programingjd/font_subset/issues'
    vcsUrl = 'https://github.com/programingjd/font_subset.git'
    githubRepo = 'programingjd/font_subset'
    githubReleaseNotesFile = 'README.md'
    licenses = ['Apache-2.0']
    labels = ['font','subset','ttf','woff']
    publicDownloadNumbers = true
    version {
      name = project.version
      mavenCentralSync {
        sync = false
      }
    }
  }
}

tasks.bintrayUpload.dependsOn tasks.proguard

def getBintrayApiKey() {
  def f = new File("$projectDir/local.properties")
  f.text.splitEachLine('=', { if (it && it[0] == 'bintrayApiKey') return it[1] })
}

